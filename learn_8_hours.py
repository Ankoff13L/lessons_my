

# if True:
#     try:
#         num = int(input('Введите любое целое число: '))
#         print(f'Вы ввели число: {num}')

#     except ValueError:
#         print('Вы ввели неправильный формат. Попробуйте ещё раз.')

 
# if 0:
#     print('Yes')
# else:
#     print('No')
#     print('hello')

# x = 0
# while x < 10000000:
#     x += 1

# print(x)
# print('The End')

# # Перебирай весь список и временно присваивай переменной 'x' значение каждого элемента
# for x in ['hello', 'wird', 17]: #  
#     # Действия которые делает цикл for
#     print(x) # в данном случае печатает значение каждой временной переменной 'x',
#              # т.е. печает все элементы списка


# # Перебирай диапазон чисел от 0 до 5 (0,1,2,3,4) и временно присваивай переменной 'x' 
# # значениие каждого элемента
# for x in range(5):
#     # Действия которые делает цикл for
#     print(x) # в данном случае печатает значение каждой временной переменной 'x'


# k = 0
# for i in range(100):
#     if i > 70:
#         k += 1
    
# print(k) 


# # Цикл для подсчёта суммы чётных чисел

# s = 0
# for num in [11, 13, 18, 24, 7, 10]: 
#     if num % 2 == 0: # Конструкция 'if' для определения чётных чисел (деление на остаток: если число
#                      # делится на 2 без остатка, значит это чётное число)
#         s += num     # Сдесь чётные числа прибавляются друг к другу: 18+24+10=52

# print(s)


# m = -1_000_000_000_000_000_000_000_000
# for num in [11, 13, 18, 24, 7, 10]:
#     if num % 2 == 0 and num > m: 
#         m = num

# print(m)
# m.__str__()



# a = [10, 23, 8, 17, 'hello', 'cat', 'dog', 45, [1, 2, 3]]

# print(len(a))
# print(len('hello'))


# for num in "раз", "два", 8, 12:
#     print("hello world")



# # for - цикл. Совершает последовательную итерацию элементоа в итерируемом объекте
# - списки
# - кортежи
# - строки
# - словари
# - файлы
# - генераторы: range()   # ("диапазон") - генерирует последовательность чисел для 
#                         # управления количеством итераций
#               enumerate()   # ("перечислить") - позволяет получить индекс и элемент одновременно





# for index, value in enumerate(["a", "b", "c"]):
#         print(index, value)



# d = {"a"= 1, "b"= 2}
# for key in d: # ключи
# for value in d.values(): # значения
# for key, value in d.items() # пары



# Для словарей можно перебирать ключи, значения или пары:
# d = {"a": 1, "b": 2}
# for key in d:                 # ключи
#     print(key)

# for value in d.values():      # значения
#     print(value)
    
# for key, value in d.items():  # пары
#     print(key, value)

# for num in range(5):
#     print(num)

# fruits = ["apple", "banana", "cherry"]
# for index,fruit in enumerate(fruits):
#     print(index,fruit)  


# m = 0
# for num in [1, 4, 13, 18, 24, 7, 10]:
#     if num % 2 == 0 and num > m:
#         m = num

# print(m)

# import add_main

# result = add_main.add(10, 5)
# print(f'Сумма: {result}')

# print(__name__)

# a = 3
# b = 4
# print(a.__add__(b))

# for s in range(3):      # Внешний цикл (s): Перебирает значения от 0 до 2 (3 итерации).
#     for k in range(2):  # Внутренний цикл (k): Для каждого значения s перебирает значения 
#                         # от 0 до 1 (2 итерации).
#         print(s, k)


# a = []
# n = int(input())           # юзер вводит нужное количество иттераций и int() преобразует текст в число
# for i in range(n):
#     a.append(int(input())) # юзер вводит числа и метод .append() добавляет их в конец списока
# print(a)                   # показывает получившийся список
# print(len(a))              # считает длину списка
# print(sum(a))              # считает сумму всех чисел списка
# print(max(a))              # показывает максимальное число в списке
# print(min(a))              # показывает минимальное число в списке



# a = []
# n = int(input())
# for a in range(n):
#     a.append(int(input()))
#     a.len()
#     a.sum()
#     a.max()
#     a.min()
# print(a)

# import random                         # модуль для генерации рандомных чисел

# a = []
# n = random.randint(1, 10)             # генерирует случайное количество иттераций в пределах от 1 до 10
# for i in range(n):
#     a.append(random.randint(3, 500))  # добавляет в список случайные числа в диапазоне от 3 до 50
# print(a)


# a = (100, 200, 300)    # кортеж
# b = [100, 200, 300]    # список

# print(a.__sizeof__())  # узнаём сколько весит кортеж
# print(b.__sizeof__())  # узнаём сколько весит список


# b = (100, 200, 300)
# c = b
# b[0] = 7
# print(b)
# print(c)


# Создаём пустой словарь и наполняем его 

# d = dict()         # создаём пустой словарь
# d[12] = 100        # добавляем пару "ключ:значение"
# d['hello'] = 20    # добавляем пару "ключ:значение"
# print(d)


# Создаём словарь для подсчёта количества повторения элементов в словаре

# d = dict()
# for x in [12, 13, 14, 12, 15, 17, 18]:
#     if x in d:                         # если x в словаре d уже находится, 
#         d[x] += 1                      # тогда d с индексом x увеличь на 1
#     else:                              # а иначе, если х пока не находится в d 
#         d[x] = 1                       # создаём d с индексом х и делаем его равным 1
# print(d)



# d = {}
# for x in [12, 13, 14, 12, 15, 17, 18]:
#     if x not in d:                         
#         d[x] = 1                      
#     else:                              
#         d[x] += 1                       
# print(d)


# d = {}
# for x in 'hello word': # перебираем по буквенно строку 'hello world'. Каждый знак это ключ для словаря
#     if x in d:         # праверяем ключи на повторы в словаре d                
#         d[x] += 1      # если такой знак (ключ) уже есть в словаре, увеличиваем его значение на 1               
#     else:              # иначе                
#         d[x] = 1       # просто добавь к ключу значениен 1            
# print(d)

# p = set()    # создаём множество 'p'
# p.add(7)     # применяя метод .add() добавляем элемент 7
# p.add(8)     # добавляем элемент 8
# p.add(153)   # добавляем элемент 153
# p.add(153)   # пытаемся добавить элемент 153, но так как он повторяется, то в колекцию не добавляеся
# print(p)


import random

p = set()
for i in range(1_000_000):                # добавим в множество 1 млн. элементов
    p.add(random.randint(1, 1_000_000))   # рандомных, от 1 до 1_000_000

print(len(p))                             # и посчитаем количество фактически добавленных в множество чисел,
                         # после того, как он не стал добавлять сгенерированные рандомные дубликаты

